{"version":3,"sources":["components/movie-list.js","components/movie-details.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","props","movieClicked","movie","evt","movies","map","key","id","onClick","title","Fontawesome","require","MovieDetails","mov","this","Fragment","name","className","avg_rating","no_of_ratings","description","Component","App","state","selectedMovie","setState","fetch","method","headers","then","resp","json","res","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAsBeA,MApBf,SAAmBC,GAEhB,IAAMC,EAAe,SAAAC,GAAK,OAAI,SAAAC,GAC1BH,EAAMC,aAAaC,KAItB,OACI,6BACMF,EAAMI,OAAOC,KAAK,SAAAH,GACZ,OACI,wBAAII,IAAKJ,EAAMK,GAAIC,QAASP,EAAaC,IACpCA,EAAMO,YCZ/BC,EAAcC,EAAQ,IA8BXC,E,iLAzBP,IAAMC,EAAMC,KAAKd,MAAME,MACvB,OACI,kBAAC,IAAMa,SAAP,KAEMD,KAAKd,MAAME,MACT,6BACI,4BAAKY,KAAKd,MAAME,MAAMO,OAEtB,kBAACC,EAAD,CAAaM,KAAK,OAAOC,UAAWJ,EAAIK,WAAa,EAAI,SAAU,IACnE,kBAACR,EAAD,CAAaM,KAAK,OAAOC,UAAWJ,EAAIK,WAAa,EAAI,SAAU,IACnE,kBAACR,EAAD,CAAaM,KAAK,OAAOC,UAAWJ,EAAIK,WAAa,EAAI,SAAU,IACnE,kBAACR,EAAD,CAAaM,KAAK,OAAOC,UAAWJ,EAAIK,WAAa,EAAI,SAAU,IACnE,kBAACR,EAAD,CAAaM,KAAK,OAAOC,UAAWJ,EAAIK,WAAa,EAAI,SAAU,IAPvE,IAQML,EAAIM,cARV,IASI,2BAAIN,EAAIO,cAIZ,U,GArBOC,aC0CZC,E,2MAtCbC,MAAQ,CACNnB,OAAQ,GACRoB,cAAe,M,EAejBvB,aAAe,SAAAC,GACb,EAAKuB,SAAS,CAACD,cAAgBtB,K,mFAbb,IAAD,OAEjBwB,MAAM,oCAAqC,CACzCC,OAAQ,MACRC,QAAS,CACP,cAAiB,oDAElBC,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACrBF,MAAM,SAAAG,GAAG,OAAI,EAAKP,SAAS,CAACrB,OAAQ4B,OACpCC,OAAO,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAQrB,OACE,yBAAKjB,UAAU,OACX,+CACA,yBAAKA,UAAU,UACX,kBAAC,EAAD,CAAWb,OAAQU,KAAKS,MAAMnB,OAAQH,aAAca,KAAKb,eACzD,kBAAC,EAAD,CAAcC,MAAOY,KAAKS,MAAMC,sB,GA9BpCH,aCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.3a954d04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction MovieList(props){\r\n    \r\n   const movieClicked = movie => evt => {\r\n       props.movieClicked(movie);\r\n\r\n   }\r\n\r\n    return(\r\n        <div>\r\n            { props.movies.map( movie => {\r\n                    return (\r\n                        <h3 key={movie.id} onClick={movieClicked(movie)}>\r\n                            {movie.title}\r\n                        </h3>\r\n                    )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieList;","import React,{Component} from 'react';\r\n\r\nvar Fontawesome = require('react-fontawesome');\r\n\r\nclass MovieDetails extends Component{\r\n\r\n    render(){\r\n        const mov = this.props.movie\r\n        return(\r\n            <React.Fragment>   \r\n            \r\n                { this.props.movie ? (\r\n                    <div>\r\n                        <h3>{this.props.movie.title}</h3>\r\n\r\n                        <Fontawesome name='star' className={mov.avg_rating > 0 ? 'orange': 0}/>\r\n                        <Fontawesome name='star' className={mov.avg_rating > 1 ? 'orange': 0}/>\r\n                        <Fontawesome name='star' className={mov.avg_rating > 2 ? 'orange': 0}/>\r\n                        <Fontawesome name='star' className={mov.avg_rating > 3 ? 'orange': 0}/>\r\n                        <Fontawesome name='star' className={mov.avg_rating > 4 ? 'orange': 0}/>\r\n                        ({mov.no_of_ratings})\r\n                        <p>{mov.description}</p>\r\n\r\n                    </div>\r\n                    \r\n                ) : null}\r\n            </React.Fragment>\r\n\r\n        ) \r\n    }\r\n}\r\n\r\nexport default MovieDetails;","import React,{Component} from 'react';\nimport './App.css';\nimport MovieList from './components/movie-list';\nimport MovieDetails from './components/movie-details';\n\nclass App extends Component {\n  //movies = ['titanic', 'avatar','RHTDM'];\n\n  state = {\n    movies: [],\n    selectedMovie: null\n  }\n\n  componentDidMount(){\n    //fetch data from REST API\n    fetch('http://127.0.0.1:8000/api/movies/', {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Token a7ccc956ea681a615e6928302b55131d76096f44'\n      }\n    }).then( resp => resp.json())    \n    .then( res => this.setState({movies: res}))\n    .catch( error => console.log(error))\n  }\n\n  movieClicked = movie => {\n    this.setState({selectedMovie : movie})\n  }\n\n  render(){     \n            return (\n              <div className=\"App\">      \n                  <h1>Movie Rater Web</h1>   \n                  <div className='layout'>\n                      <MovieList movies={this.state.movies} movieClicked={this.movieClicked}></MovieList> \n                      <MovieDetails movie={this.state.selectedMovie} />  \n                  </div>\n                  \n              </div>\n            );\n\n  }\n    \n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}